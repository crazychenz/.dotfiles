
# Priority ordered configuration follows:
# - 1. Usability - Keymappings and Mouse Options
# - 2. Visibility - Colors, themes, light/dark mode
# - 3. Status - Extra Information
# - 4. Sensible Options
# - 5. Plugins

###################################
######## Usability Options ########
###################################

# Enable mouse options
set -g mouse on

# Default to bash with new panes
set-option -g default-command bash

# OSC passthrough
set -g allow-passthrough on

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on

# OK Session Management, but too much for me atm.
#bind C-n display-popup \
#  -E 'bash -i -c "read -p \"Session name: \" name; tmux new-session -d -s \$name && tmux switch-client -t \$name"'
#bind C-j display-popup \
#  -E "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# Poor man's which key
bind-key C-k display-popup -E "cat ~/.dotfiles/windows/hotkeys.json | jq -r '.[]' | fzf"

# Python popup for quick tests, Ctrl-p for "python".
bind-key C-p display-popup -E "python3"

# File manager, Ctrl+e for "explorer".
bind-key C-e display-popup \
  -d "#{pane_current_path}" \
  -w 90% \
  -h 90% \
  -E "yazi"

# Bash shell, Ctrl-t for "terminal".
bind-key C-t display-popup \
  -d "#{pane_current_path}" \
  -E "bash"

bind-key C-s display-popup \
  -E "$HOME/.local/bin/tmux-sessionizer"

# set vi-mode and keybindings
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Split pane into current path
bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# Enable terminal locking (if relavant)
unbind C-l
bind C-l lock-session
# For security
#set-option -g lock-after-time 600

####################################
######## Visibility Options ########
####################################

# Enable 256 colors. (Sometimes preferred in containers).
set -g default-terminal "screen-256color"
# Enable 24 bit color.
set-option -sa terminal-overrides ",xterm*:Tc"
# How often to update status information (e.g. timestamp.)
set -g status-interval 5

# Dark Theme for 256 Colors (default)
set -g window-style 'fg=colour230,bg=colour235'
set -g window-active-style 'fg=colour230,bg=colour233'
set -g pane-active-border-style 'fg=colour237,bg=colour234'
set -g pane-border-style 'fg=colour232,bg=colour234'
# Colors
set -g @color_red "#eba0ac"
set -g @color_black "#0c0c0c"
set -g @color_green "#a6e3a1"
set -g @color_orange "#fab387"
set -g @color_blue "#74c7ec"
set -g @color_purple "#b4befe"
set -g @color_yellow "#f9e2af"
set -g @color_bg "#1e1e2e"
set -g @color_fg "#cdd6f4"

# Light Theme for 256 Colors (if TMUX_LIGHT set)
if-shell '[ -e "$HOME/.light_theme" ]' "
  set -g window-style 'fg=colour237,bg=colour223'
  set -g window-active-style 'fg=colour237,bg=colour230'
  set -g pane-active-border-style 'fg=colour232,bg=colour248'
  set -g pane-border-style 'fg=colour237,bg=colour248'
  # Colors
  set -g @color_fg \"#1e1e2e\"
  set -g @color_bg \"#cdd6f4\"
"

####################################
######## Status Information ########
####################################

set -g pane-border-format '###{pane_index} [ #{pane_tty} ] S:#{session_name} M:#{pane_marked} #{pane_width}x#{pane_height}'
set -g pane-border-status 'bottom' # off|top|bottom

# Nerd Font Icons
set -g @left_arch "\uE0B6"
set -g @icon_person "\uF1AE "
set -g @icon_terminal "\uE795 "
set -g @icon_uptime "\uF496 "
set -g @icon_datetime "\uF274 "
set -g @icon_temp "\uF2C9 "
set -g @icon_session "\uF0CE "
set -g @icon_cpu "\uF2DB "


# Reset Status Bars
set -g status-right-length 100
set -g status-left-length 100
set -g status-left ""
set -g status-right ""
# Current Command
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_red}]#{@left_arch}"
set -ag status-right "#[bg=#{@color_red},fg=#{@color_black}]#{@icon_terminal}"
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_fg}] #{pane_current_command} "
# Session
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_green}]#{@left_arch}"
set -ag status-right "#[bg=#{@color_green},fg=#{@color_black}]#{@icon_session}"
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_fg}] #S "
# CPU Percentage
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_orange}]#{@left_arch}"
set -ag status-right "#[bg=#{@color_orange},fg=#{@color_black}]#{@icon_cpu}"
set -g @memory_avail "free -m | awk '/Mem:/ {printf \"%.2f/%.2f GiB\", \$7/1024, \$2/1024}'"
set -g @cpu_util "top -bn2 | awk '/Cpu/ {usage=100-$8} END {printf \"%.2f%%\", usage}'"
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_fg}] #(#{@cpu_util}) #(#{@memory_avail}) "
# Uptime
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_blue}]#{@left_arch}"
set -ag status-right "#[bg=#{@color_blue},fg=#{@color_black}]#{@icon_uptime}"
set -g @system_uptime "uptime | awk -F'(up |, +|,| )+' '{print \$3 \", \" \$4}'"
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_fg}] #(#{@system_uptime}) "
# Date Time
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_purple}]#{@left_arch}"
set -ag status-right "#[bg=#{@color_purple},fg=#{@color_black}]#{@icon_datetime}"
set -ag status-right "#[bg=#{@color_bg},fg=#{@color_fg}] %Y-%m-%d %H:%M"

# TODO: Battery
# battery \uF0079 # 81 7f 7e 7d 7c 7b 7a
# battery plugged in \uF06A5
# battery charging \uF0084

##################################
######## Sensible Options ########
##################################

# Vim Mode Switching Delay
set-option -s escape-time 0
# Scroll back history
set-option -g history-limit 50000
# Messages displayed for 4 seconds.
set-option -g display-time 4000
# Emacs keybindings (C-A - Home, C-E - End)
#set-option -g status-keys emacs
# Handle focus notifications (e.g. pane triggers status updates)
set-option -g focus-events on
# Always resize all panes
set-window-option -g aggressive-resize on

# Easier window navigation
bind-key C-p previous-window
bind-key C-n next-window

# Easy config re-source.
bind-key R run-shell " \
  tmux source-file $HOME/.config/tmux/tmux.conf > /dev/null; \
  tmux display-message 'Sourced $HOME/.config/tmux/tmux.conf!'"

# vim tmux navigation
set -g @vim_pattern "(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?"
bind-key -n "C-h" if-shell "ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +#{@vim_pattern}$'" "send-keys 'C-h'" "select-pane -L"
bind-key -T copy-mode-vi "C-h" select-pane -L

bind-key -n "C-l" if-shell "ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +#{@vim_pattern}$'" "send-keys 'C-l'" "select-pane -R"
bind-key -T copy-mode-vi "C-l" select-pane -R

bind-key -n "C-k" if-shell "ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +#{@vim_pattern}$'" "send-keys 'C-k'" "select-pane -U"
bind-key -T copy-mode-vi "C-k" select-pane -U

bind-key -n "C-j" if-shell "ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +#{@vim_pattern}$'" "send-keys 'C-j'" "select-pane -D"
bind-key -T copy-mode-vi "C-j" select-pane -D

bind-key -n "C-\\" if-shell "ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +#{@vim_pattern}$'" "send-keys 'C-\\'" "select-pane -l"
bind-key -T copy-mode-vi "C-\\" select-pane -l


################################
######## Plugin Options ########
################################

# Plugins annoy me.

